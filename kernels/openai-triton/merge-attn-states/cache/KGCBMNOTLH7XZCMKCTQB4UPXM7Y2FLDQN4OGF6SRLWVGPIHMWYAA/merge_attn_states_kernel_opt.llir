; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @merge_attn_states_kernel_opt(ptr addrspace(1) %0, ptr addrspace(1) readnone captures(none) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !12
  %12 = mul i32 %10, %9, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !14
  %15 = sext i32 %8 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %14, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.cg.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %16) #2, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %19, i64 %15, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.cg.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %20) #2, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = fcmp oeq float %18, 0x7FF0000000000000, !dbg !20
  %24 = select i1 %23, float 0xFFF0000000000000, float %18, !dbg !21
  %25 = fcmp oeq float %22, 0x7FF0000000000000, !dbg !22
  %26 = select i1 %25, float 0xFFF0000000000000, float %22, !dbg !23
  %27 = tail call float @llvm.maxnum.f32(float %24, float %26), !dbg !24
  %28 = fsub float %24, %27, !dbg !25
  %29 = fsub float %26, %27, !dbg !26
  %30 = fmul float %28, 0x3FF7154760000000, !dbg !27
  %31 = tail call float @llvm.nvvm.ex2.approx.f(float %30), !dbg !27
  %32 = fmul float %29, 0x3FF7154760000000, !dbg !28
  %33 = tail call float @llvm.nvvm.ex2.approx.f(float %32), !dbg !28
  %34 = fadd float %31, %33, !dbg !29
  %35 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !30
  %36 = shl i32 %35, 2, !dbg !30
  %37 = and i32 %36, 252, !dbg !30
  %38 = or disjoint i32 %37, 256, !dbg !30
  %39 = shl i32 %11, 9, !dbg !31
  %40 = mul i32 %39, %8, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !33
  %43 = shl i32 %10, 9, !dbg !34
  %44 = sext i32 %43 to i64, !dbg !35
  %45 = getelementptr float, ptr addrspace(1) %42, i64 %44, !dbg !35
  %46 = zext nneg i32 %37 to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %45, i64 %46, !dbg !36
  %48 = zext nneg i32 %38 to i64, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %45, i64 %48, !dbg !36
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.cg.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !37
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !37
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !37
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !37
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !37
  %55 = bitcast i32 %51 to float, !dbg !37
  %56 = bitcast i32 %52 to float, !dbg !37
  %57 = bitcast i32 %53 to float, !dbg !37
  %58 = bitcast i32 %54 to float, !dbg !37
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.cg.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !37
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !37
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !37
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !37
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !37
  %64 = bitcast i32 %60 to float, !dbg !37
  %65 = bitcast i32 %61 to float, !dbg !37
  %66 = bitcast i32 %62 to float, !dbg !37
  %67 = bitcast i32 %63 to float, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %44, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %46, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %69, i64 %48, !dbg !40
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.cg.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !41
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !41
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !41
  %77 = bitcast i32 %73 to float, !dbg !41
  %78 = bitcast i32 %74 to float, !dbg !41
  %79 = bitcast i32 %75 to float, !dbg !41
  %80 = bitcast i32 %76 to float, !dbg !41
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.cg.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #2, !dbg !41
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !41
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !41
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !41
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !41
  %86 = bitcast i32 %82 to float, !dbg !41
  %87 = bitcast i32 %83 to float, !dbg !41
  %88 = bitcast i32 %84 to float, !dbg !41
  %89 = bitcast i32 %85 to float, !dbg !41
  %90 = tail call float @llvm.nvvm.div.full(float %31, float %34), !dbg !42
  %91 = tail call float @llvm.nvvm.div.full(float %33, float %34), !dbg !43
  %92 = fmul float %90, %55, !dbg !44
  %93 = fmul float %90, %56, !dbg !44
  %94 = fmul float %90, %57, !dbg !44
  %95 = fmul float %90, %58, !dbg !44
  %96 = fmul float %90, %64, !dbg !44
  %97 = fmul float %90, %65, !dbg !44
  %98 = fmul float %90, %66, !dbg !44
  %99 = fmul float %90, %67, !dbg !44
  %100 = fmul float %91, %77, !dbg !45
  %101 = fmul float %91, %78, !dbg !45
  %102 = fmul float %91, %79, !dbg !45
  %103 = fmul float %91, %80, !dbg !45
  %104 = fmul float %91, %86, !dbg !45
  %105 = fmul float %91, %87, !dbg !45
  %106 = fmul float %91, %88, !dbg !45
  %107 = fmul float %91, %89, !dbg !45
  %108 = fadd float %92, %100, !dbg !46
  %109 = fadd float %93, %101, !dbg !46
  %110 = fadd float %94, %102, !dbg !46
  %111 = fadd float %95, %103, !dbg !46
  %112 = fadd float %96, %104, !dbg !46
  %113 = fadd float %97, %105, !dbg !46
  %114 = fadd float %98, %106, !dbg !46
  %115 = fadd float %99, %107, !dbg !46
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !47
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %44, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %46, !dbg !49
  %119 = getelementptr float, ptr addrspace(1) %117, i64 %48, !dbg !49
  %120 = bitcast float %108 to i32, !dbg !50
  %121 = bitcast float %109 to i32, !dbg !50
  %122 = bitcast float %110 to i32, !dbg !50
  %123 = bitcast float %111 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %121, i32 %122, i32 %123, ptr addrspace(1) %118, i1 true) #2, !dbg !50
  %124 = bitcast float %112 to i32, !dbg !50
  %125 = bitcast float %113 to i32, !dbg !50
  %126 = bitcast float %114 to i32, !dbg !50
  %127 = bitcast float %115 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %124, i32 %125, i32 %126, i32 %127, ptr addrspace(1) %119, i1 true) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "triton_merge_attn_states.py", directory: "/workspace/dev/openllm/dev/CUDA-Learn-Notes/kernels/openai-triton/merge-attn-states")
!4 = !{ptr @merge_attn_states_kernel_opt, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "merge_attn_states_kernel_opt", linkageName: "merge_attn_states_kernel_opt", scope: !3, file: !3, line: 72, type: !7, scopeLine: 72, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 83, column: 30, scope: !6)
!10 = !DILocation(line: 84, column: 33, scope: !6)
!11 = !DILocation(line: 85, column: 29, scope: !6)
!12 = !DILocation(line: 86, column: 32, scope: !6)
!13 = !DILocation(line: 88, column: 44, scope: !6)
!14 = !DILocation(line: 88, column: 33, scope: !6)
!15 = !DILocation(line: 88, column: 57, scope: !6)
!16 = !DILocation(line: 88, column: 20, scope: !6)
!17 = !DILocation(line: 90, column: 33, scope: !6)
!18 = !DILocation(line: 90, column: 57, scope: !6)
!19 = !DILocation(line: 90, column: 20, scope: !6)
!20 = !DILocation(line: 92, column: 38, scope: !6)
!21 = !DILocation(line: 92, column: 29, scope: !6)
!22 = !DILocation(line: 93, column: 38, scope: !6)
!23 = !DILocation(line: 93, column: 29, scope: !6)
!24 = !DILocation(line: 95, column: 32, scope: !6)
!25 = !DILocation(line: 96, column: 20, scope: !6)
!26 = !DILocation(line: 97, column: 20, scope: !6)
!27 = !DILocation(line: 98, column: 18, scope: !6)
!28 = !DILocation(line: 99, column: 18, scope: !6)
!29 = !DILocation(line: 100, column: 21, scope: !6)
!30 = !DILocation(line: 106, column: 31, scope: !6)
!31 = !DILocation(line: 108, column: 48, scope: !6)
!32 = !DILocation(line: 108, column: 60, scope: !6)
!33 = !DILocation(line: 108, column: 36, scope: !6)
!34 = !DILocation(line: 109, column: 31, scope: !6)
!35 = !DILocation(line: 109, column: 20, scope: !6)
!36 = !DILocation(line: 109, column: 43, scope: !6)
!37 = !DILocation(line: 108, column: 20, scope: !6)
!38 = !DILocation(line: 111, column: 36, scope: !6)
!39 = !DILocation(line: 112, column: 20, scope: !6)
!40 = !DILocation(line: 112, column: 43, scope: !6)
!41 = !DILocation(line: 111, column: 20, scope: !6)
!42 = !DILocation(line: 117, column: 21, scope: !6)
!43 = !DILocation(line: 118, column: 21, scope: !6)
!44 = !DILocation(line: 119, column: 18, scope: !6)
!45 = !DILocation(line: 119, column: 36, scope: !6)
!46 = !DILocation(line: 119, column: 28, scope: !6)
!47 = !DILocation(line: 120, column: 22, scope: !6)
!48 = !DILocation(line: 121, column: 13, scope: !6)
!49 = !DILocation(line: 121, column: 36, scope: !6)
!50 = !DILocation(line: 122, column: 13, scope: !6)
!51 = !DILocation(line: 120, column: 4, scope: !6)
